{"version":3,"sources":["../src/html_ctrl.js"],"names":["MetricsPanelCtrl","$","_","kbn","TimeSeries","moment","panelDefaults","method","url","errorMode","params_js","display_js","HtmlCtrl","$scope","$injector","templateSrv","$sce","$http","defaults","panel","timeSettings","events","on","onInitEditMode","bind","onPanelInitalized","onRefresh","onRender","datasource","updateTimeRange","updateFN","editorTabs","splice","addEditorTab","pluginId","editorTabIndex","params_fn","display_fn","Function","replace","scopedVars","ex","console","warn","self","params","width","resolution","height","src","param","html","updateContent","then","successCallback","response","data","errorCallback","body","JSON","stringify","content","trustAsHtml","e","templateUrl"],"mappings":"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","file":"html_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series';\nimport moment from 'moment';\nimport './css/html-panel.css!';\n\nconst panelDefaults = {\n  method: 'GET',\n  url: 'https://raw.githubusercontent.com/ryantxu/ajax-panel/master/static/example.txt',\n  errorMode: 'show',\n  params_js: '{\\n' +\n             \" from:ctrl.range.from.format('x'),  // x is unix ms timestamp\\n\" +\n             \" to:ctrl.range.to.format('x'), \\n\" +\n             ' height:ctrl.height\\n' +\n             '}',\n  display_js: null\n};\n\nexport class HtmlCtrl extends MetricsPanelCtrl {\n  // constructor($scope, $injector, private templateSrv, private $sce) {\n  constructor($scope, $injector, templateSrv, $sce, $http) {\n\n    super($scope, $injector);\n    this.$sce = $sce;\n    this.$http = $http;\n    this.templateSrv = templateSrv;\n\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.timeSettings, panelDefaults.timeSettings);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitalized.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n  }\n\n  // This just skips trying to send the actual query.  perhaps there is a better way\n  issueQueries(datasource) {\n    this.updateTimeRange();\n\n    // console.log('block issueQueries', datasource);\n  }\n\n  onPanelInitalized() {\n    this.updateFN();\n  }\n\n  onInitEditMode() {\n    this.editorTabs.splice(1,1); // remove the 'Metrics Tab'\n    this.addEditorTab('Options', 'public/plugins/' + this.pluginId + '/editor.html',1);\n    this.editorTabIndex = 1;\n\n    this.updateFN();\n  }\n\n  onPanelTeardown() {\n   // this.$timeout.cancel(this.nextTickPromise);\n  }\n\n  updateFN() {\n    this.params_fn = null;\n    this.display_fn = null;\n\n    if(this.panel.params_js) {\n      try {\n        this.params_fn = new Function('ctrl', 'return ' + this.templateSrv.replace(this.panel.params_js, this.panel.scopedVars));\n      }\n      catch( ex ) {\n        console.warn('error parsing params_js', this.panel.params_js, ex );\n        this.params_fn = null;\n      }\n    }\n\n    // NOTE, this is not exposed yet\n    if(this.panel.display_js) {\n      try {\n        this.display_fn = new Function('ctrl', 'response', this.panel.display_js);\n      }\n      catch( ex ) {\n        console.warn('error parsing display_js', this.panel.display_js, ex );\n        this.display_fn = null;\n      }\n    }\n\n    this.onRefresh();\n  }\n\n  onRefresh() {\n    // console.log('refresh', this);\n    this.updateTimeRange();  // needed for the first call\n\n    var self = this;\n    var url = this.templateSrv.replace(self.panel.url, this.panel.scopedVars);\n    var params;\n    if(this.params_fn) {\n      params = this.params_fn( this );\n    }\n    // console.log( \"onRender\", this, params );\n\n    if(self.panel.method === 'iframe') {\n      var width = self.resolution - 50;\n      var height = self.height;\n      var src = url + '?' + $.param(params);\n      var html = `<iframe width='${width}' height='${height}' frameborder='0' src=\"${src}\"><\\/iframe>`;\n      self.updateContent(html);\n    }\n    else {\n        this.$http({\n            method: this.panel.method,\n            url: url,\n            params: params\n        }).then(function successCallback(response) {\n            //console.log('success', response, self);\n            var html = response.data;\n            if (self.display_fn) {\n                html = self.display_fn(self, response);\n            }\n            self.updateContent(html);\n        }, function errorCallback(response) {\n            console.warn('error', response);\n            var body = '<h1>Error</h1><pre>' + JSON.stringify(response, null, \" \") + \"</pre>\";\n            self.updateContent(body);\n        });\n    }\n\n  }\n\n  updateContent(html) {\n    try {\n      this.content = this.$sce.trustAsHtml(this.templateSrv.replace(html, this.panel.scopedVars));\n    } catch (e) {\n      // console.log('Text panel error: ', e);\n      this.content = this.$sce.trustAsHtml(html);\n    }\n  }\n\n  onRender() {\n    // console.log('render', this);\n  }\n}\n\nHtmlCtrl.templateUrl = 'module.html';\n"]}